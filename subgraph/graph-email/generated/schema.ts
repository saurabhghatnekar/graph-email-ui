// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class NewMessage extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("_fromAddress", Value.fromBytes(Bytes.empty()));
    this.set("_toAddress", Value.fromBytes(Bytes.empty()));
    this.set("_ipfsLink", Value.fromString(""));
    this.set("isEncrypted", Value.fromString(""));
    this.set("time", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NewMessage entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NewMessage entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NewMessage", id.toString(), this);
    }
  }

  static load(id: string): NewMessage | null {
    return changetype<NewMessage | null>(store.get("NewMessage", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _fromAddress(): Bytes {
    let value = this.get("_fromAddress");
    return value!.toBytes();
  }

  set _fromAddress(value: Bytes) {
    this.set("_fromAddress", Value.fromBytes(value));
  }

  get _toAddress(): Bytes {
    let value = this.get("_toAddress");
    return value!.toBytes();
  }

  set _toAddress(value: Bytes) {
    this.set("_toAddress", Value.fromBytes(value));
  }

  get _ipfsLink(): string {
    let value = this.get("_ipfsLink");
    return value!.toString();
  }

  set _ipfsLink(value: string) {
    this.set("_ipfsLink", Value.fromString(value));
  }

  get isEncrypted(): string {
    let value = this.get("isEncrypted");
    return value!.toString();
  }

  set isEncrypted(value: string) {
    this.set("isEncrypted", Value.fromString(value));
  }

  get time(): BigInt {
    let value = this.get("time");
    return value!.toBigInt();
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }
}

export class newRegistration extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("_toAddress", Value.fromBytes(Bytes.empty()));
    this.set("_publicKey", Value.fromString(""));
    this.set("time", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save newRegistration entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save newRegistration entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("newRegistration", id.toString(), this);
    }
  }

  static load(id: string): newRegistration | null {
    return changetype<newRegistration | null>(store.get("newRegistration", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _toAddress(): Bytes {
    let value = this.get("_toAddress");
    return value!.toBytes();
  }

  set _toAddress(value: Bytes) {
    this.set("_toAddress", Value.fromBytes(value));
  }

  get _publicKey(): string {
    let value = this.get("_publicKey");
    return value!.toString();
  }

  set _publicKey(value: string) {
    this.set("_publicKey", Value.fromString(value));
  }

  get time(): BigInt {
    let value = this.get("time");
    return value!.toBigInt();
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }
}
